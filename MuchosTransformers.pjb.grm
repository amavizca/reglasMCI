/*
* Valida que un job no tenga mas transformers de los permitidos
*/

// maximum allow stages
def stageLimit = 1

def hasFailure = false
def stageCount = item.graph.V.stage.has('stageType', 'CTransformerStage').count()

// gather all (local) containers
item.graph.V.container.transform { container ->

    // calculate the stage count for this container
    container.stageCount = container.out.stage.has('stageType', 'CTransformerStage').as('stage').both.stage.dedup().loop('stage'){true}{true}.dedup().count()

    // check if container exceeds stage limit
    if (container.stageCount > stageLimit) {
        compliance.failure("Local container '${container.fullQualifiedName}' has ${container.stageCount} Transformers.")
        hasFailure = true
    }

    return container
}
.gather { containers ->
    // adjust the job stage counts to ignore those in local containers
    stageCount -= containers.stageCount.sum()
}
.iterate()

// check job stage count does not exceed limit
if (stageCount > stageLimit) {
    compliance.failure("Job has ${stageCount} Transformers.")
    hasFailure = true
}

// include stage limit in error message
if (hasFailure) {
    compliance.failure("The number of Transformers per job/container should not exceed ${stageLimit} as this impedes maintainability.")
}
